"""
Django settings for crowdprinter project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import importlib
import os

from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Import the configuration module
config_path = os.getenv("CONFIGURATION", "crowdprinter.configuration")
try:
    configuration = importlib.import_module(config_path)
except ModuleNotFoundError as e:
    if getattr(e, "name") == config_path:
        raise ImproperlyConfigured(
            f"Specified configuration module ({config_path}) not found. Please define src/crowdprinter/configuration.py "
            f"per the documentation, or specify an alternate module in the CONFIGURATION environment variable."
        )
    raise

# Check for missing required configuration parameters
for parameter in ("ALLOWED_HOSTS", "DATABASE", "SECRET_KEY"):
    if not hasattr(configuration, parameter):
        raise ImproperlyConfigured(
            f"Required parameter {parameter} is missing from configuration."
        )

SECRET_KEY = getattr(configuration, "SECRET_KEY")
DEBUG = getattr(configuration, "DEBUG", False)
ALLOWED_HOSTS = getattr(configuration, "ALLOWED_HOSTS")
DOWNLOAD_FILE_PREFIX = getattr(configuration, "DOWNLOAD_FILE_PREFIX", "")
DATABASES = {"default": getattr(configuration, "DATABASE")}

# Crowdprinter specific configuration
CROWDPRINTER_DEFAULT_MAX_ATTEMPTS = getattr(
    configuration, "CROWDPRINTER_DEFAULT_MAX_ATTEMPTS", 3
)

# Mail
EMAIL_BACKEND = getattr(
    configuration, "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)

# allauth
# https://django-allauth.readthedocs.io/en/latest/configuration.html
ACCOUNT_EMAIL_REQUIRED = getattr(configuration, "ACCOUNT_EMAIL_REQUIRED", True)
ACCOUNT_EMAIL_VERIFICATION = getattr(
    configuration, "ACCOUNT_EMAIL_VERIFICATION", "none"
)
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = getattr(
    configuration, "ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION", True
)
ACCOUNT_LOGIN_ON_PASSWORD_RESET = getattr(
    configuration, "ACCOUNT_LOGIN_ON_PASSWORD_RESET", True
)
LOGIN_REDIRECT_URL = getattr(configuration, "LOGIN_REDIRECT_URL", "/")

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/
LANGUAGE_CODE = getattr(configuration, "LANGUAGE_CODE", "en-us")
TIME_ZONE = getattr(configuration, "TIME_ZONE", "UTC")
USE_I18N = getattr(configuration, "USE_I18N", True)
USE_L10N = getattr(configuration, "USE_L10N", True)
USE_TZ = getattr(configuration, "USE_TZ", True)

# Static and Media files (CSS, JavaScript, Images, User Uploads)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = getattr(configuration, "STATIC_URL", "/static/")
STATIC_ROOT = getattr(
    configuration, "STATIC_ROOT", os.path.join(BASE_DIR, "staticfiles")
)
MEDIA_ROOT = getattr(configuration, "MEDIA_ROOT", os.path.join(BASE_DIR, "media"))

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # serve static files in development via whitenoise
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "crowdprinter",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "django_prometheus",
]

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "crowdprinter.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "crowdprinter.context_processors.add_header_footer_stls",
            ],
        },
    },
]

WSGI_APPLICATION = "crowdprinter.wsgi.application"
# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "crowdprinter.user"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# various django settings
SITE_ID = 1  # needed by allauth
